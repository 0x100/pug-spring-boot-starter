/*
 * Copyright (C) 2014-2015 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.text.SimpleDateFormat

buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'eclipse'
    id 'jacoco'
    id 'maven-publish'
    id 'net.researchgate.release' version '3.1.0'
    id "io.spring.dependency-management" version "1.1.7"
    id 'com.github.kt3k.coveralls' version '2.12.2'
    id "com.github.ben-manes.versions" version "0.51.0"
    id 'io.github.gradle-nexus.publish-plugin' version '2.0.0'
}

repositories {
    mavenCentral()
}

version = project.version
group = project.group

def buildTimeAndDate = new Date()
ext {
    buildDate = new SimpleDateFormat('dd-MMM-yyyy').format(buildTimeAndDate)
    buildTime = new SimpleDateFormat('hh:mm aa').format(buildTimeAndDate)
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
    }
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation("org.springframework:spring-core") {
        exclude module: 'commons-logging'
    }
    implementation 'de.neuland-bfi:spring-pug4j:3.3.0'
    implementation 'de.neuland-bfi:pug4j:2.3.0'

    testImplementation 'junit:junit'
    testImplementation "org.springframework:spring-test"
    testImplementation 'org.springframework.boot:spring-boot-test'
}

def jarManifestAttributes = [
        'Built-By'  : System.properties['user.name'],
        'Created-By': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.getProperty("java.vm.version")})",
        'Build-Date': buildDate,
        'Build-Time': buildTime
]

jar {
    manifest {
        attributes(jarManifestAttributes)
    }
}

task sourcesJar(type: Jar) {
    dependsOn classes
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

def javaApiUrl = 'https://docs.oracle.com/javase/8/docs/api/'
def groovyApiUrl = 'http://groovy-lang.org/api.html'

tasks.withType(Javadoc) {
    options.links(javaApiUrl, groovyApiUrl)
    if (JavaVersion.current().isJava8Compatible()) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

task javadocJar(type: Jar) {
    dependsOn javadoc
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

jacocoTestReport {
    reports {
        xml.required.set(true)
        html.required.set(true)
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom.withXml {
                def root = asNode()
                root.appendNode('name', project.pomName)
                root.appendNode('description', project.description)
                root.appendNode('url', 'https://github.com/0x100/pug-spring-boot-starter')
                root.appendNode('packaging', 'jar')

                def scm = root.appendNode('scm')
                scm.appendNode('url', 'https://github.com/0x100/pug-spring-boot-starter')
                scm.appendNode('connection', 'scm:https://0x100@github.com/0x100/pug-spring-boot-starter.git')
                scm.appendNode('developerConnection', 'scm:git@github.com:0x100/pug-spring-boot-starter.git')

                def licenseNode = root.appendNode('licenses').appendNode('license')
                licenseNode.appendNode('name', 'The Apache Software License, Version 2.0')
                licenseNode.appendNode('url', 'http://www.apache.org/licenses/LICENSE-2.0.txt')
                licenseNode.appendNode('distribution', 'repo')

                def developers = root.appendNode('developers')
                def developer = developers.appendNode('developer')
                developer.appendNode('id', '0x100')
                developer.appendNode('name', 'Ilya Lysenko')
                developer.appendNode('email', 'lysenko.ilya@gmail.com')

                root.dependencies.'*'.findAll {
                    it.scope.text() == 'runtime' && configurations.compileClasspath.allDependencies.find { dep ->
                        dep.name == it.artifactId.text()
                    }
                }.each {
                    it.scope*.value = 'compile'
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username.set(project.findProperty("ossrhUsername") ?: "")
            password.set(project.findProperty("ossrhPassword") ?: "")
        }
    }
}

javadoc {
    options.links(
            "https://docs.oracle.com/javase/17/docs/api/",
            "https://docs.spring.io/spring/docs/current/javadoc-api/",
            "https://docs.spring.io/spring-boot/api/java/"
    )
}

jacocoTestReport.dependsOn check